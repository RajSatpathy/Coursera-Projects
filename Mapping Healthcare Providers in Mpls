{
    "nbformat_minor": 1, 
    "cells": [
        {
            "source": "This notebook demonstrates my use of the following packages to make a visual showing all critical care centers within 30 miles of a given neighborhood in Minneapolis.\n<br><ul> <li>pandas and numpy for data management and organization</li>\n<br><li>BeautifulSoup for web scraping and html parsing</li>\n<br><li>geocoder for location grabbing</li>\n<br><li>FourSquare API integration for venue information</li>\n<br><li>Folium for mapping</li>", 
            "cell_type": "markdown", 
            "metadata": {
                "collapsed": true
            }
        }, 
        {
            "source": "Please view it on IBM's Watson Studio at the following link if you are viewing it on GitHub.<br>\nhttps://dataplatform.cloud.ibm.com/analytics/notebooks/v2/9bd3e9f7-2df1-468f-a160-665f2f7c33a4/view?access_token=57ccf0f013e8cd4fe8bb4501a00f0efff0afd6a8505e448e247b1df20f33ef28", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport json\n\n!conda install -c conda-forge geopy --yes\nfrom geopy.geocoders import Nominatim\n\nimport requests\nfrom pandas.io.json import json_normalize\n\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\nfrom sklearn.cluster import KMeans\n\n!conda install -c conda-forge folium=0.5.0 --yes\nimport folium\n\nfrom bs4 import BeautifulSoup", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "Fetching package metadata .............\nSolving package specifications: .\n\n# All requested packages already installed.\n# packages in environment at /opt/conda/envs/DSX-Python35:\n#\ngeopy                     1.18.1                     py_0    conda-forge\nFetching package metadata .............\nSolving package specifications: .\n\n# All requested packages already installed.\n# packages in environment at /opt/conda/envs/DSX-Python35:\n#\nfolium                    0.5.0                      py_0    conda-forge\n"
                }
            ], 
            "execution_count": 2
        }, 
        {
            "source": "!wget https://en.wikipedia.org/wiki/Neighborhoods_of_Minneapolis -O 'mpls.html'", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "--2019-01-05 06:33:17--  https://en.wikipedia.org/wiki/Neighborhoods_of_Minneapolis\r\nResolving en.wikipedia.org (en.wikipedia.org)... 208.80.153.224, 2620:0:860:ed1a::1\r\nConnecting to en.wikipedia.org (en.wikipedia.org)|208.80.153.224|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 87064 (85K) [text/html]\r\nSaving to: \u2018mpls.html\u2019\r\n\r\n\r 0% [                                       ] 0           --.-K/s              \r100%[======================================>] 87,064      --.-K/s   in 0.006s  \r\n\r\n2019-01-05 06:33:17 (13.3 MB/s) - \u2018mpls.html\u2019 saved [87064/87064]\r\n\r\n"
                }
            ], 
            "execution_count": 3
        }, 
        {
            "source": "with open('mpls.html') as html_file:\n    soup=BeautifulSoup(html_file,'lxml')", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 5
        }, 
        {
            "source": "pagelists=soup.find_all('li')", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 6
        }, 
        {
            "source": "pagelists[17:100] #these are all the neighborhood links\n\nlinknumber = np.arange(17,101,1)\n\nneighborhoods=[]\nfor link in linknumber:\n    neighborhoods.append(pagelists[link].get_text())", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 7
        }, 
        {
            "source": "neighborhoods=pd.DataFrame(neighborhoods)\nneighborhoods.columns = ['Neighborhood']\nneighborhoods.head() #check to make sure this initialized\nneighborhoods.shape", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "(84, 1)"
                    }, 
                    "execution_count": 8, 
                    "metadata": {}
                }
            ], 
            "execution_count": 8
        }, 
        {
            "source": "address = 'Minneapolis, Minnesota' #get coords for mpls\n\ngeolocator = Nominatim(user_agent='my-app')\nlocation = geolocator.geocode(address)\nmplslatitude = location.latitude\nmplslongitude = location.longitude\nprint('The geograpical coordinate of Bryn Mawr are {}, {}.'.format(mplslatitude, mplslongitude))", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "The geograpical coordinate of Bryn Mawr are 44.9772995, -93.2654692.\n"
                }
            ], 
            "execution_count": 10
        }, 
        {
            "source": "# initialize your variable to None\nlat_lng_coords = None\n\nlatitudes=[]\nlongitudes=[]\n# loop until you get the coordinates\nfor address in neighborhoods.values:\n        geolocator = Nominatim(user_agent='my-app')\n        location = geolocator.geocode('{}, Minneapolis, Minnesota'.format(address))\n        if location is None:\n            print('{} does not call coordinates, please remove.'.format(address))\n        else:\n            latitudes.append(location.latitude)\n            longitudes.append(location.longitude)\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "['Ventura Village'] does not call coordinates, please remove.\n"
                }
            ], 
            "execution_count": 11
        }, 
        {
            "source": "mpls_hoods = neighborhoods[neighborhoods['Neighborhood']!='Ventura Village'] #Remove item with no coordinates called\nmpls_hoods.shape\n#83 neighborhoods located after cleaning data from wiki page.", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "(83, 1)"
                    }, 
                    "execution_count": 20, 
                    "metadata": {}
                }
            ], 
            "execution_count": 20
        }, 
        {
            "source": "coords=pd.DataFrame({0:latitudes,1:longitudes})\ncoords.head()", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "           0          1\n0  44.973826 -93.308779\n1  44.942977 -93.293319\n2  44.954144 -93.316987\n3  44.943828 -93.304247\n4  44.955573 -93.299393", 
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>44.973826</td>\n      <td>-93.308779</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>44.942977</td>\n      <td>-93.293319</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>44.954144</td>\n      <td>-93.316987</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>44.943828</td>\n      <td>-93.304247</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>44.955573</td>\n      <td>-93.299393</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    }, 
                    "execution_count": 13, 
                    "metadata": {}
                }
            ], 
            "execution_count": 13
        }, 
        {
            "source": "mpls_data=pd.merge(mpls_hoods,coords,left_index=True, right_index=True)#merge on indices since they were all in order\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 14
        }, 
        {
            "source": "mpls_data.columns=['Neighborhood','Latitude','Longitude']\nmpls_data.head()", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "       Neighborhood   Latitude  Longitude\n0         Bryn Mawr  44.973826 -93.308779\n1             CARAG  44.942977 -93.293319\n2  Cedar-Isles-Dean  44.954144 -93.316987\n3      East Calhoun  44.943828 -93.304247\n4        East Isles  44.955573 -93.299393", 
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Bryn Mawr</td>\n      <td>44.973826</td>\n      <td>-93.308779</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CARAG</td>\n      <td>44.942977</td>\n      <td>-93.293319</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Cedar-Isles-Dean</td>\n      <td>44.954144</td>\n      <td>-93.316987</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>East Calhoun</td>\n      <td>44.943828</td>\n      <td>-93.304247</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>East Isles</td>\n      <td>44.955573</td>\n      <td>-93.299393</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    }, 
                    "execution_count": 134, 
                    "metadata": {}
                }
            ], 
            "execution_count": 134
        }, 
        {
            "source": "mpls_map=folium.Map(location=(mplslatitude,mplslongitude),zoom_start=12)\nmpls_map", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "<folium.folium.Map at 0x2ba33fb28320>", 
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVMgPSBmYWxzZTsgTF9OT19UT1VDSCA9IGZhbHNlOyBMX0RJU0FCTEVfM0QgPSBmYWxzZTs8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9yYXdnaXQuY29tL3B5dGhvbi12aXN1YWxpemF0aW9uL2ZvbGl1bS9tYXN0ZXIvZm9saXVtL3RlbXBsYXRlcy9sZWFmbGV0LmF3ZXNvbWUucm90YXRlLmNzcyIvPgogICAgPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KICAgIDxzdHlsZT4jbWFwIHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDowO2xlZnQ6MDt9PC9zdHlsZT4KICAgIAogICAgICAgICAgICA8c3R5bGU+ICNtYXBfYTMxOGZlYmFlNmMzNDdhMTliOTNkNzMxYmQ1YTNkYTIgewogICAgICAgICAgICAgICAgcG9zaXRpb24gOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgIHdpZHRoIDogMTAwLjAlOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgICAgICAgICBsZWZ0OiAwLjAlOwogICAgICAgICAgICAgICAgdG9wOiAwLjAlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIAo8L2hlYWQ+Cjxib2R5PiAgICAKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb2xpdW0tbWFwIiBpZD0ibWFwX2EzMThmZWJhZTZjMzQ3YTE5YjkzZDczMWJkNWEzZGEyIiA+PC9kaXY+CiAgICAgICAgCjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG51bGw7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIG1hcF9hMzE4ZmViYWU2YzM0N2ExOWI5M2Q3MzFiZDVhM2RhMiA9IEwubWFwKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcF9hMzE4ZmViYWU2YzM0N2ExOWI5M2Q3MzFiZDVhM2RhMicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2VudGVyOiBbNDQuOTc3Mjk5NSwtOTMuMjY1NDY5Ml0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiAxMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEJvdW5kczogYm91bmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmxkQ29weUp1bXA6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JzOiBMLkNSUy5FUFNHMzg1NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHRpbGVfbGF5ZXJfOTY4ZDNlY2Q2ZGJmNGRkYTg1NmQ2ZWMxYzUzZmM0NzEgPSBMLnRpbGVMYXllcigKICAgICAgICAgICAgICAgICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsCiAgICAgICAgICAgICAgICB7CiAgImF0dHJpYnV0aW9uIjogbnVsbCwKICAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsCiAgIm1heFpvb20iOiAxOCwKICAibWluWm9vbSI6IDEsCiAgIm5vV3JhcCI6IGZhbHNlLAogICJzdWJkb21haW5zIjogImFiYyIKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfYTMxOGZlYmFlNmMzNDdhMTliOTNkNzMxYmQ1YTNkYTIpOwogICAgICAgIAo8L3NjcmlwdD4=\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
                    }, 
                    "execution_count": 16, 
                    "metadata": {}
                }
            ], 
            "execution_count": 16
        }, 
        {
            "source": "for lat,lng,label in zip(mpls_data['Latitude'],\n                        mpls_data['Longitude'],\n                        mpls_data['Neighborhood']):\n    label = folium.Popup(label,parse_html=True)\n    folium.CircleMarker(location=[lat,lng],\n                       radius=5,\n                       popup=label,\n                       color='blue',\n                       fill=True,\n                       fill_color='#3186cc',\n                       fill_opacity=0.7,\n                       parse_html=False).add_to(mpls_map)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 17
        }, 
        {
            "source": "mpls_map", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "<folium.folium.Map at 0x2ba33fb28320>", 
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
                    }, 
                    "execution_count": 18, 
                    "metadata": {}
                }
            ], 
            "execution_count": 18
        }, 
        {
            "source": "Now that we have successfully labeled the map, we want to call the Foursquare API and determine how many health care providers there are for each area.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "CLIENT_ID = 'GAS1UYURTKA54B2V3STX2OIDJ2SELEA2TCH3G5OXI502HD04' # your Foursquare ID\nCLIENT_SECRET = 'AL1GDRWXE4MYXZ0MGGQ4BJMJEX2TCVJR2SUSTYNXB5KW5D1I' # your Foursquare Secret\nVERSION = '20181218' # Foursquare API version", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 23
        }, 
        {
            "source": "def getNearbyVenues(names, latitudes, longitudes, query='healthcare', radius=250, LIMIT=100):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&query={}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng,\n            query,\n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighborhood', \n                  'Neighborhood Latitude', \n                  'Neighborhood Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 26
        }, 
        {
            "source": "LIMIT=100\nmpls_healthvenues=getNearbyVenues(names=mpls_data['Neighborhood'],\n                                   latitudes=mpls_data['Latitude'],\n                                   longitudes=mpls_data['Longitude']\n                                  )", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "Bryn Mawr\nCARAG\nCedar-Isles-Dean\nEast Calhoun\nEast Isles\nKenwood\nLowry Hill\nLowry Hill East\nWest Calhoun\nCleveland\nFolwell\nLind-Bohanon\nMcKinley\nShingle Creek\nVictory\nWebber-Camden\nDowntown East\nDowntown West\nElliot Park\nLoring Park\nNorth Loop\nStevens Square/Loring Heights\nCooper\nHiawatha\nHowe\nLongfellow\nSeward\nHarrison\nHawthorne\nJordan\nNear North\nSumner-Glenwood\nWillard Hay\nDiamond Lake\nEricsson\nField\nHale\nKeewaydin\nMinnehaha\nMorris Park\nNorthrop\nPage\nRegina\nWenonah\nAudubon Park\nBeltrami\nBottineau\nColumbia Park\nHolland\nLogan Park\nMarshall Terrace\nNortheast Park\nSheridan\nSt. Anthony East\nSt. Anthony West\nWaite Park\nWindom Park\nEast Phillips\nMidtown Phillips\nPhillips West\nBancroft\nBryant\nCentral\nCorcoran\nLyndale\nPowderhorn Park\nStandish\nWhittier\nArmatage\nEast Harriet\nFulton\nKenny\nKing Field\nLinden Hills\nLynnhurst\nTangletown\nWindom\nCedar-Riverside\nComo\nMarcy-Holmes\nNicollet Island/East Bank\nProspect Park\n"
                }
            ], 
            "execution_count": 27
        }, 
        {
            "source": "print(mpls_healthvenues.shape)\nmpls_healthvenues.head()\n#Obviously some venues need to be removed since we have a chiropractor and an acupuncturist on there.", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "(96, 7)\n"
                }, 
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "  Neighborhood  Neighborhood Latitude  Neighborhood Longitude  \\\n0    Bryn Mawr              44.973826              -93.308779   \n1    Bryn Mawr              44.973826              -93.308779   \n2    Bryn Mawr              44.973826              -93.308779   \n3        CARAG              44.942977              -93.293319   \n4        CARAG              44.942977              -93.293319   \n\n                  Venue  Venue Latitude  Venue Longitude  \\\n0       Bryn Mawr Chiro       44.973431       -93.308505   \n1      Mill City Dental       44.973694       -93.309258   \n2  Vitality Acupuncture       44.973167       -93.305919   \n3  Park Nicolett Clinic       44.943844       -93.295930   \n4         House Of Cats       44.943749       -93.293169   \n\n              Venue Category  \n0               Chiropractor  \n1           Dentist's Office  \n2              Acupuncturist  \n3            Doctor's Office  \n4  Cajun / Creole Restaurant  ", 
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>Neighborhood Latitude</th>\n      <th>Neighborhood Longitude</th>\n      <th>Venue</th>\n      <th>Venue Latitude</th>\n      <th>Venue Longitude</th>\n      <th>Venue Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Bryn Mawr</td>\n      <td>44.973826</td>\n      <td>-93.308779</td>\n      <td>Bryn Mawr Chiro</td>\n      <td>44.973431</td>\n      <td>-93.308505</td>\n      <td>Chiropractor</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bryn Mawr</td>\n      <td>44.973826</td>\n      <td>-93.308779</td>\n      <td>Mill City Dental</td>\n      <td>44.973694</td>\n      <td>-93.309258</td>\n      <td>Dentist's Office</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Bryn Mawr</td>\n      <td>44.973826</td>\n      <td>-93.308779</td>\n      <td>Vitality Acupuncture</td>\n      <td>44.973167</td>\n      <td>-93.305919</td>\n      <td>Acupuncturist</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CARAG</td>\n      <td>44.942977</td>\n      <td>-93.293319</td>\n      <td>Park Nicolett Clinic</td>\n      <td>44.943844</td>\n      <td>-93.295930</td>\n      <td>Doctor's Office</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CARAG</td>\n      <td>44.942977</td>\n      <td>-93.293319</td>\n      <td>House Of Cats</td>\n      <td>44.943749</td>\n      <td>-93.293169</td>\n      <td>Cajun / Creole Restaurant</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    }, 
                    "execution_count": 28, 
                    "metadata": {}
                }
            ], 
            "execution_count": 28
        }, 
        {
            "source": "mpls_healthvenues['Venue Category'].unique()", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "array(['Chiropractor', \"Dentist's Office\", 'Acupuncturist',\n       \"Doctor's Office\", 'Cajun / Creole Restaurant', 'Veterinarian',\n       'Medical Center', 'Physical Therapist', 'Mental Health Office',\n       'Hospital', 'Maternity Clinic', 'Eye Doctor', 'Emergency Room',\n       'Urgent Care Center'], dtype=object)"
                    }, 
                    "execution_count": 29, 
                    "metadata": {}
                }
            ], 
            "execution_count": 29
        }, 
        {
            "source": "Of the above categories, we will only be wanting doctor's office, hospital, emergency room, and urgent care center since the other categories are not describing the type of healthcare we are looking for. ('Medical center' includes items like 'holistic healing', etc.)", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "mpls_ccvenues=mpls_healthvenues[(mpls_healthvenues['Venue Category']==\"Doctor's Office\")|\\\n                               (mpls_healthvenues['Venue Category']=='Hospital')|\\\n                               (mpls_healthvenues['Venue Category']=='Urgent Care Center')|\\\n                               (mpls_healthvenues['Venue Category']=='Emergency Room')].reset_index(drop=True)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 30
        }, 
        {
            "source": "mpls_ccvenues['Venue Category'].unique()", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "array([\"Doctor's Office\", 'Hospital', 'Emergency Room',\n       'Urgent Care Center'], dtype=object)"
                    }, 
                    "execution_count": 31, 
                    "metadata": {}
                }
            ], 
            "execution_count": 31
        }, 
        {
            "source": "mpls_ccvenues.head(1)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "  Neighborhood  Neighborhood Latitude  Neighborhood Longitude  \\\n0        CARAG              44.942977              -93.293319   \n\n                  Venue  Venue Latitude  Venue Longitude   Venue Category  \n0  Park Nicolett Clinic       44.943844        -93.29593  Doctor's Office  ", 
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>Neighborhood Latitude</th>\n      <th>Neighborhood Longitude</th>\n      <th>Venue</th>\n      <th>Venue Latitude</th>\n      <th>Venue Longitude</th>\n      <th>Venue Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CARAG</td>\n      <td>44.942977</td>\n      <td>-93.293319</td>\n      <td>Park Nicolett Clinic</td>\n      <td>44.943844</td>\n      <td>-93.29593</td>\n      <td>Doctor's Office</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    }, 
                    "execution_count": 35, 
                    "metadata": {}
                }
            ], 
            "execution_count": 35
        }, 
        {
            "source": "mpls_ccvenues.groupby(by='Neighborhood').count()", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "                 Neighborhood Latitude  Neighborhood Longitude  Venue  \\\nNeighborhood                                                            \nAudubon Park                         1                       1      1   \nCARAG                                1                       1      1   \nComo                                 1                       1      1   \nCooper                               1                       1      1   \nDowntown East                        2                       2      2   \nEast Isles                           1                       1      1   \nElliot Park                          9                       9      9   \nHale                                 1                       1      1   \nPowderhorn Park                      1                       1      1   \nProspect Park                        3                       3      3   \nSeward                               1                       1      1   \nSheridan                             1                       1      1   \nWindom                               1                       1      1   \n\n                 Venue Latitude  Venue Longitude  Venue Category  \nNeighborhood                                                      \nAudubon Park                  1                1               1  \nCARAG                         1                1               1  \nComo                          1                1               1  \nCooper                        1                1               1  \nDowntown East                 2                2               2  \nEast Isles                    1                1               1  \nElliot Park                   9                9               9  \nHale                          1                1               1  \nPowderhorn Park               1                1               1  \nProspect Park                 3                3               3  \nSeward                        1                1               1  \nSheridan                      1                1               1  \nWindom                        1                1               1  ", 
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood Latitude</th>\n      <th>Neighborhood Longitude</th>\n      <th>Venue</th>\n      <th>Venue Latitude</th>\n      <th>Venue Longitude</th>\n      <th>Venue Category</th>\n    </tr>\n    <tr>\n      <th>Neighborhood</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Audubon Park</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>CARAG</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Como</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Cooper</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Downtown East</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>East Isles</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Elliot Park</th>\n      <td>9</td>\n      <td>9</td>\n      <td>9</td>\n      <td>9</td>\n      <td>9</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Hale</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Powderhorn Park</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Prospect Park</th>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Seward</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Sheridan</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Windom</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    }, 
                    "execution_count": 33, 
                    "metadata": {}
                }
            ], 
            "execution_count": 33
        }, 
        {
            "source": "hoods=pd.DataFrame(mpls_ccvenues['Neighborhood'].unique())\nhoods.columns=['Neighborhood']\nhoods=hoods.sort_values('Neighborhood').reset_index(drop=True)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 37
        }, 
        {
            "source": "counts=[1,1,1,1,2,1,9,1,1,3,1,1,1]\nsum(counts)\n#24 total urgent care venues found\nhoods.shape\n#ONLY 13 neighborhoods have an urgent care center within 100km!!!\nhoods['Count']=counts", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 172
        }, 
        {
            "source": "mpls_healthmapdata = pd.merge(mpls_data, hoods, left_on='Neighborhood', right_on='Neighborhood', how='outer')\nmpls_healthmapdata['Count'].fillna(value=0, inplace=True)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 163
        }, 
        {
            "source": "labels=[]\nmpls_healthmapdata['Has Providers'] = ''\ni=0\nfor hood,number in zip(mpls_healthmapdata['Neighborhood'],mpls_healthmapdata['Count']):\n    if number==1.0:\n        string=string=hood + ' - ' + str(int(number)) + ' provider'\n        mpls_healthmapdata.iloc[i,4] = 1\n    if number !=0.0:\n        string=hood + ' - ' + str(int(number)) + ' providers'\n        mpls_healthmapdata.iloc[i,4] = 1\n    if number== 0.0:\n        string = hood + ' has NO urgent care providers!'\n        mpls_healthmapdata.iloc[i,4] = 0\n    labels.append(string)\n    i=i+1", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 169
        }, 
        {
            "source": "maplabels=pd.DataFrame(labels)\nmaplabels.columns=['Label']", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 170
        }, 
        {
            "source": "map_mplshealth=folium.Map(location=(mplslatitude,mplslongitude),zoom_start=12)\n\nfor lat,lng,category,label in zip(mpls_healthmapdata['Latitude'],mpls_healthmapdata['Longitude'],\n                                 mpls_healthmapdata['Has Providers'],maplabels['Label']):\n    label = folium.Popup(label,parse_html=True)\n    if category==1:\n        folium.CircleMarker(location=[lat,lng],\n                            radius=30,\n                            popup=label,\n                            color='green',\n                            fill=True,\n                            fill_color='#3186cc',\n                            fill_opacity=0.4,\n                            parse_html=False).add_to(map_mplshealth)\n    else:\n        folium.CircleMarker(location=[lat,lng],\n                           radius=5,\n                           popup=label,\n                           color='red',\n                           fill=True,\n                           fill_color='black',\n                           fill_opacity=1.0,\n                           parse_html=False).add_to(map_mplshealth)", 
            "cell_type": "code", 
            "metadata": {
                "scrolled": false
            }, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "<folium.folium.Map at 0x2ba344a83710>", 
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
                    }, 
                    "execution_count": 171, 
                    "metadata": {}
                }
            ], 
            "execution_count": 171
        }, 
        {
            "source": "map_mplshealth", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": null
        }, 
        {
            "source": "", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": null
        }
    ], 
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.5", 
            "name": "python3", 
            "language": "python"
        }, 
        "language_info": {
            "mimetype": "text/x-python", 
            "nbconvert_exporter": "python", 
            "version": "3.5.5", 
            "name": "python", 
            "pygments_lexer": "ipython3", 
            "file_extension": ".py", 
            "codemirror_mode": {
                "version": 3, 
                "name": "ipython"
            }
        }
    }, 
    "nbformat": 4
}